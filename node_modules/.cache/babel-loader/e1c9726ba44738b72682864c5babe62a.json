{"ast":null,"code":"import { cond, drop, includes, T } from \"ramda\";\nimport { prepData, calcs, pack } from \"./exelParser\";\nimport { lib } from \"./data\";\n\nvar withoutNums = function withoutNums(v) {\n  return \"\".concat(v).replace(/[0-9]/gm, \"\");\n};\n\nvar getVFromPack = function getVFromPack(v) {\n  console.log(pack());\n  var index = pack()[0].findIndex(function (el) {\n    return el === withoutNums(v);\n  });\n  console.log(index);\n  return pack()[2][index];\n};\n\nvar prepItem = function prepItem(v) {\n  return cond([[includes(\"$\"), function () {\n    return 4;\n  }], [function () {\n    return pack()[0].includes(withoutNums(v));\n  }, function () {\n    return getVFromPack(v);\n  }], [T, function () {\n    return v;\n  }]])(v);\n};\n\nvar prepSplitted = function prepSplitted() {\n  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return arr.map(function (el) {\n    return prepItem(el);\n  });\n};\n\nvar prepParamValue = function prepParamValue() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var splittedStr = value.replace(/\\(|\\/|\\*|\\-|\\)/gm, function (v) {\n    return \"__break__\".concat(v, \"__break__\");\n  }).split(\"__break__\").filter(function (el) {\n    return el;\n  });\n  console.log(prepSplitted(splittedStr));\n  return value;\n};\n\nvar calcsParser = function calcsParser() {\n  // console.log(calcs());\n  // console.log(pack());\n  // console.log(lib);\n  var cols = calcs()[0];\n  var calcsKeys = calcs()[1];\n  var calcsValues = calcs()[2]; // return `calcs: [%{paramName: \"a\", paramValue: \"22\"}]`;\n\n  return \"calcs: [\".concat(calcsKeys.map(function (el, idx) {\n    return \"%{paramName: \\\"\".concat(el, \"\\\", paramValue: \\\"\").concat(prepParamValue(calcsValues[idx]), \"\\\"},\\n\");\n  }), \"]\");\n};\n\nexport default calcsParser;","map":{"version":3,"sources":["/home/vyc/Documents/packparcerwithcalcs/src/parseExlsPacks/calcsParser.js"],"names":["cond","drop","includes","T","prepData","calcs","pack","lib","withoutNums","v","replace","getVFromPack","console","log","index","findIndex","el","prepItem","prepSplitted","arr","map","prepParamValue","value","splittedStr","split","filter","calcsParser","cols","calcsKeys","calcsValues","idx"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,CAA/B,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,IAA1B,QAAsC,cAAtC;AACA,SAASC,GAAT,QAAoB,QAApB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD;AAAA,SAAO,UAAGA,CAAH,EAAOC,OAAP,CAAe,SAAf,EAA0B,EAA1B,CAAP;AAAA,CAApB;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACF,CAAD,EAAO;AAC1BG,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,EAAhB;AACA,MAAMQ,KAAK,GAAGR,IAAI,GAAG,CAAH,CAAJ,CAAUS,SAAV,CAAoB,UAACC,EAAD;AAAA,WAAQA,EAAE,KAAKR,WAAW,CAACC,CAAD,CAA1B;AAAA,GAApB,CAAd;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,SAAOR,IAAI,GAAG,CAAH,CAAJ,CAAUQ,KAAV,CAAP;AACD,CALD;;AAOA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACR,CAAD,EAAO;AACtB,SAAOT,IAAI,CAAC,CACV,CAACE,QAAQ,CAAC,GAAD,CAAT,EAAgB;AAAA,WAAM,CAAN;AAAA,GAAhB,CADU,EAEV,CAAC;AAAA,WAAMI,IAAI,GAAG,CAAH,CAAJ,CAAUJ,QAAV,CAAmBM,WAAW,CAACC,CAAD,CAA9B,CAAN;AAAA,GAAD,EAA2C;AAAA,WAAME,YAAY,CAACF,CAAD,CAAlB;AAAA,GAA3C,CAFU,EAGV,CAACN,CAAD,EAAI;AAAA,WAAMM,CAAN;AAAA,GAAJ,CAHU,CAAD,CAAJ,CAIJA,CAJI,CAAP;AAKD,CAND;;AAQA,IAAMS,YAAY,GAAG,SAAfA,YAAe;AAAA,MAACC,GAAD,uEAAO,EAAP;AAAA,SAAcA,GAAG,CAACC,GAAJ,CAAQ,UAACJ,EAAD;AAAA,WAAQC,QAAQ,CAACD,EAAD,CAAhB;AAAA,GAAR,CAAd;AAAA,CAArB;;AAEA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACrC,MAAMC,WAAW,GAAGD,KAAK,CACtBZ,OADiB,CACT,kBADS,EACW,UAACD,CAAD,EAAO;AAClC,8BAAmBA,CAAnB;AACD,GAHiB,EAIjBe,KAJiB,CAIX,WAJW,EAKjBC,MALiB,CAKV,UAACT,EAAD;AAAA,WAAQA,EAAR;AAAA,GALU,CAApB;AAMAJ,EAAAA,OAAO,CAACC,GAAR,CAAYK,YAAY,CAACK,WAAD,CAAxB;AAEA,SAAOD,KAAP;AACD,CAVD;;AAYA,IAAMI,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB;AACA;AACA;AACA,MAAMC,IAAI,GAAGtB,KAAK,GAAG,CAAH,CAAlB;AACA,MAAMuB,SAAS,GAAGvB,KAAK,GAAG,CAAH,CAAvB;AACA,MAAMwB,WAAW,GAAGxB,KAAK,GAAG,CAAH,CAAzB,CANwB,CAOxB;;AACA,2BAAkBuB,SAAS,CAACR,GAAV,CAChB,UAACJ,EAAD,EAAKc,GAAL;AAAA,oCACmBd,EADnB,+BACwCK,cAAc,CAClDQ,WAAW,CAACC,GAAD,CADuC,CADtD;AAAA,GADgB,CAAlB;AAMD,CAdD;;AAgBA,eAAeJ,WAAf","sourcesContent":["import { cond, drop, includes, T } from \"ramda\";\nimport { prepData, calcs, pack } from \"./exelParser\";\nimport { lib } from \"./data\";\n\nconst withoutNums = (v) => `${v}`.replace(/[0-9]/gm, \"\");\nconst getVFromPack = (v) => {\n  console.log(pack());\n  const index = pack()[0].findIndex((el) => el === withoutNums(v));\n  console.log(index);\n  return pack()[2][index];\n};\n\nconst prepItem = (v) => {\n  return cond([\n    [includes(\"$\"), () => 4],\n    [() => pack()[0].includes(withoutNums(v)), () => getVFromPack(v)],\n    [T, () => v],\n  ])(v);\n};\n\nconst prepSplitted = (arr = []) => arr.map((el) => prepItem(el));\n\nconst prepParamValue = (value = \"\") => {\n  const splittedStr = value\n    .replace(/\\(|\\/|\\*|\\-|\\)/gm, (v) => {\n      return `__break__${v}__break__`;\n    })\n    .split(\"__break__\")\n    .filter((el) => el);\n  console.log(prepSplitted(splittedStr));\n\n  return value;\n};\n\nconst calcsParser = () => {\n  // console.log(calcs());\n  // console.log(pack());\n  // console.log(lib);\n  const cols = calcs()[0];\n  const calcsKeys = calcs()[1];\n  const calcsValues = calcs()[2];\n  // return `calcs: [%{paramName: \"a\", paramValue: \"22\"}]`;\n  return `calcs: [${calcsKeys.map(\n    (el, idx) =>\n      `%{paramName: \"${el}\", paramValue: \"${prepParamValue(\n        calcsValues[idx]\n      )}\"},\\n`\n  )}]`;\n};\n\nexport default calcsParser;\n"]},"metadata":{},"sourceType":"module"}