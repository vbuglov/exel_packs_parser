{"ast":null,"code":"import { cond, drop, includes, T } from \"ramda\";\nimport { prepData, calcs, pack } from \"./exelParser\";\nimport { lib } from \"./data\";\n\nvar withoutNums = function withoutNums(v) {\n  return \"\".concat(v).replace(/[0-9]/gm, \"\");\n};\n\nvar getVFromPack = function getVFromPack(v) {\n  var index = pack()[0].findIndex(function (el) {\n    return el === withoutNums(v);\n  });\n  return pack()[2][index];\n};\n\nvar getVFromBook = function getVFromBook(v, book) {\n  return v;\n};\n\nvar isFormula = function isFormula(str) {\n  return str[0] === \"=\";\n};\n\nvar getVFromLib = function getVFromLib(v) {\n  var bookName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var splitted = v.replace(/\\$/gm, \"\").split(\".\");\n  var book = lib[bookName || splitted[0]];\n  var field = book[splitted[1]];\n\n  if (isFormula(field)) {\n    return prepParamValue(field, bookName || splitted[0]);\n  }\n\n  return field;\n};\n\nvar prepItem = function prepItem(v) {\n  var bookName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return cond([[function () {\n    return !!bookName;\n  }, function () {\n    return getVFromBook(v, bookName);\n  }], [function () {\n    return includes(\"$\", v) && includes(\".\", v);\n  }, function () {\n    return getVFromLib(v);\n  }], [function () {\n    return pack()[0].includes(withoutNums(v));\n  }, function () {\n    return getVFromPack(v);\n  }], [T, function () {\n    return v;\n  }]])(v);\n};\n\nvar prepSplitted = function prepSplitted() {\n  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var bookName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return arr.map(function (el) {\n    return prepItem(el, bookName);\n  });\n};\n\nvar prepParamValue = function prepParamValue() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var bookName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var splittedStr = value.replace(/\\(|\\/|\\*|\\-|\\)/gm, function (v) {\n    return \"__break__\".concat(v, \"__break__\");\n  }).split(\"__break__\").filter(function (el) {\n    return el;\n  });\n  return prepSplitted(splittedStr, bookName).join(\"\");\n};\n\nvar calcsParser = function calcsParser() {\n  var cols = calcs()[0];\n  var calcsKeys = calcs()[1];\n  var calcsValues = calcs()[2];\n  return \"calcs: [\\n  \".concat(calcsKeys.map(function (el, idx) {\n    return \"%{paramName: \\\"\".concat(el, \"\\\", paramValue: \\\"\").concat(prepParamValue(calcsValues[idx]), \"\\\"},\\n\");\n  }), \"]\");\n};\n\nexport default calcsParser;","map":{"version":3,"sources":["/home/vyc/Documents/packparcerwithcalcs/src/parseExlsPacks/calcsParser.js"],"names":["cond","drop","includes","T","prepData","calcs","pack","lib","withoutNums","v","replace","getVFromPack","index","findIndex","el","getVFromBook","book","isFormula","str","getVFromLib","bookName","splitted","split","field","prepParamValue","prepItem","prepSplitted","arr","map","value","splittedStr","filter","join","calcsParser","cols","calcsKeys","calcsValues","idx"],"mappings":"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","sourcesContent":["import { cond, drop, includes, T } from \"ramda\";\nimport { prepData, calcs, pack } from \"./exelParser\";\nimport { lib } from \"./data\";\n\nconst withoutNums = (v) => `${v}`.replace(/[0-9]/gm, \"\");\nconst getVFromPack = (v) => {\n  const index = pack()[0].findIndex((el) => el === withoutNums(v));\n  return pack()[2][index];\n};\nconst getVFromBook = (v, book) => v;\n\nconst isFormula = (str) => str[0] === \"=\";\n\nconst getVFromLib = (v, bookName = null) => {\n  let splitted = v.replace(/\\$/gm, \"\").split(\".\");\n  const book = lib[bookName || splitted[0]];\n  const field = book[splitted[1]];\n  if (isFormula(field)) {\n    return prepParamValue(field, bookName || splitted[0]);\n  }\n  return field;\n};\n\nconst prepItem = (v, bookName = null) => {\n  return cond([\n    [() => !!bookName, () => getVFromBook(v, bookName)],\n    [() => includes(\"$\", v) && includes(\".\", v), () => getVFromLib(v)],\n    [() => pack()[0].includes(withoutNums(v)), () => getVFromPack(v)],\n    [T, () => v],\n  ])(v);\n};\n\nconst prepSplitted = (arr = [], bookName = null) =>\n  arr.map((el) => prepItem(el, bookName));\n\nconst prepParamValue = (value = \"\", bookName = null) => {\n  const splittedStr = value\n    .replace(/\\(|\\/|\\*|\\-|\\)/gm, (v) => {\n      return `__break__${v}__break__`;\n    })\n    .split(\"__break__\")\n    .filter((el) => el);\n  return prepSplitted(splittedStr, bookName).join(\"\");\n};\n\nconst calcsParser = () => {\n  const cols = calcs()[0];\n  const calcsKeys = calcs()[1];\n  const calcsValues = calcs()[2];\n  return `calcs: [\n  ${calcsKeys.map(\n    (el, idx) =>\n      `%{paramName: \"${el}\", paramValue: \"${prepParamValue(\n        calcsValues[idx]\n      )}\"},\\n`\n  )}]`;\n};\n\nexport default calcsParser;\n"]},"metadata":{},"sourceType":"module"}