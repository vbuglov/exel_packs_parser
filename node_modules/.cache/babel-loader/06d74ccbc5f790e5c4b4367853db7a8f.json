{"ast":null,"code":"import { pipe } from \"ramda\";\nimport { pack } from \"./data\";\nimport { prepCols } from \"./prepTitles\";\nimport calcsParser from \"./calcsParser\";\n\nvar pSplit = function pSplit() {\n  var pack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return pack.split(\"\\n\").filter(function (el) {\n    return el;\n  });\n};\n\nvar pFloat = function pFloat() {\n  var pack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"\"];\n  return pack.includes(\"pack_lat\") ? \"\\nfloat: [\\\"pack_lat\\\", \\\"pack_lon\\\"],\" : \"\";\n};\n\nvar pDate = function pDate() {\n  var pack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"\"];\n  return pack.includes(\"pack_dt\") ? \"\\n    datetime:  [\\\"pack_dt\\\"],\" : \"\";\n};\n\nvar pMinMax = function pMinMax() {\n  var pack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\"\"];\n  return pack.includes(\"pack_lat\") ? \"\\n    min: russia_coord_min_112,\\n    max: russia_coord_max_112,\\n\" : \"\";\n};\n\nvar parseData = function parseData() {\n  var pack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[\"\"], [\"\"]];\n  return \"\\n  %{\\n    raw_data_db_table: \\\"\\\",\\n    number: \".concat(pack[1][0], \",\\n    len: \").concat(pack[0].length, \",\\n    pack_fields: \\\"\").concat(pack[0].join(\" \"), \"\\\",\\n    \").concat(calcsParser(), \"\\n    non_nilable: [\").concat(pack[0].map(function (el) {\n    return \"\\\"\".concat(el, \"\\\"\");\n  }).join(\", \"), \"],\").concat(pFloat(pack[0])).concat(pDate(pack[0])).concat(pMinMax(pack[0]), \"\\n  }\\n\");\n};\n\nvar parseExlsPacks = function parseExlsPacks() {\n  return pipe(pSplit, prepCols, parseData)(pack);\n};\n\nexport { parseExlsPacks };","map":{"version":3,"sources":["/home/vyc/Documents/packparcerwithcalcs/src/parseExlsPacks/index.js"],"names":["pipe","pack","prepCols","calcsParser","pSplit","split","filter","el","pFloat","includes","pDate","pMinMax","parseData","length","join","map","parseExlsPacks"],"mappings":"AAAA,SAASA,IAAT,QAAqB,OAArB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAACH,IAAD,uEAAQ,EAAR;AAAA,SAAeA,IAAI,CAACI,KAAL,CAAW,IAAX,EAAiBC,MAAjB,CAAwB,UAACC,EAAD;AAAA,WAAQA,EAAR;AAAA,GAAxB,CAAf;AAAA,CAAf;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAACP,IAAD,uEAAQ,CAAC,EAAD,CAAR;AAAA,SACbA,IAAI,CAACQ,QAAL,CAAc,UAAd,+CAAmE,EADtD;AAAA,CAAf;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,MAACT,IAAD,uEAAQ,CAAC,EAAD,CAAR;AAAA,SACZA,IAAI,CAACQ,QAAL,CAAc,SAAd,wCAA6D,EADjD;AAAA,CAAd;;AAGA,IAAME,OAAO,GAAG,SAAVA,OAAU;AAAA,MAACV,IAAD,uEAAQ,CAAC,EAAD,CAAR;AAAA,SACdA,IAAI,CAACQ,QAAL,CAAc,UAAd,2EAII,EALU;AAAA,CAAhB;;AAMA,IAAMG,SAAS,GAAG,SAAZA,SAAY;AAAA,MAACX,IAAD,uEAAQ,CAAC,CAAC,EAAD,CAAD,EAAO,CAAC,EAAD,CAAP,CAAR;AAAA,qEAGJA,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAHI,yBAIPA,IAAI,CAAC,CAAD,CAAJ,CAAQY,MAJD,mCAKEZ,IAAI,CAAC,CAAD,CAAJ,CAAQa,IAAR,CAAa,GAAb,CALF,sBAMZX,WAAW,EANC,iCAOEF,IAAI,CAAC,CAAD,CAAJ,CAAQc,GAAR,CAAY,UAACR,EAAD;AAAA,uBAAYA,EAAZ;AAAA,GAAZ,EAA+BO,IAA/B,CAAoC,IAApC,CAPF,eAOgDN,MAAM,CACtEP,IAAI,CAAC,CAAD,CADkE,CAPtD,SASdS,KAAK,CAACT,IAAI,CAAC,CAAD,CAAL,CATS,SASGU,OAAO,CAACV,IAAI,CAAC,CAAD,CAAL,CATV;AAAA,CAAlB;;AAaA,IAAMe,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAMhB,IAAI,CAACI,MAAD,EAASF,QAAT,EAAmBU,SAAnB,CAAJ,CAAkCX,IAAlC,CAAN;AAAA,CAAvB;;AAEA,SAASe,cAAT","sourcesContent":["import { pipe } from \"ramda\";\r\nimport { pack } from \"./data\";\r\nimport { prepCols } from \"./prepTitles\";\r\nimport calcsParser from \"./calcsParser\";\r\n\r\nconst pSplit = (pack = \"\") => pack.split(\"\\n\").filter((el) => el);\r\n\r\nconst pFloat = (pack = [\"\"]) =>\r\n  pack.includes(\"pack_lat\") ? `\\nfloat: [\"pack_lat\", \"pack_lon\"],` : \"\";\r\n\r\nconst pDate = (pack = [\"\"]) =>\r\n  pack.includes(\"pack_dt\") ? `\\n    datetime:  [\"pack_dt\"],` : \"\";\r\n\r\nconst pMinMax = (pack = [\"\"]) =>\r\n  pack.includes(\"pack_lat\")\r\n    ? `\\n    min: russia_coord_min_112,\r\n    max: russia_coord_max_112,\r\n`\r\n    : \"\";\r\nconst parseData = (pack = [[\"\"], [\"\"]]) => `\r\n  %{\r\n    raw_data_db_table: \"\",\r\n    number: ${pack[1][0]},\r\n    len: ${pack[0].length},\r\n    pack_fields: \"${pack[0].join(\" \")}\",\r\n    ${calcsParser()}\r\n    non_nilable: [${pack[0].map((el) => `\"${el}\"`).join(\", \")}],${pFloat(\r\n  pack[0]\r\n)}${pDate(pack[0])}${pMinMax(pack[0])}\r\n  }\r\n`;\r\n\r\nconst parseExlsPacks = () => pipe(pSplit, prepCols, parseData)(pack);\r\n\r\nexport { parseExlsPacks };\r\n"]},"metadata":{},"sourceType":"module"}