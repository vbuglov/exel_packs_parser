{"ast":null,"code":"import { drop, identical, is } from \"ramda\";\nvar strLib = {\n  pk: \"pack\",\n  data: \"pack\",\n  PacketID: \"pack\",\n  DataType: \"pack\",\n  DateTime: \"pack_dt\",\n  TimeStamp: \"pack_dt\",\n  Latitude: \"pack_lat\",\n  Longitude: \"pack_lon\",\n  \"gps.time\": \"stime\",\n  \"gps.date\": \"sdate\"\n};\n\nvar toLower = function toLower() {\n  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return str.trim().replace(/[A-Z]+/gm, function (m) {\n    return \"_\".concat(m.toLocaleLowerCase());\n  }).replace(/\\d+/gm, function (m) {\n    return \"\".concat(m);\n  }).replace(/\\.+/gm, \"_\").replace(/\\_+/gm, \"_\").replace(/^./gm, function (m) {\n    return m.toLocaleLowerCase();\n  }).replace(/^\\_/gm, \"\").replace(/(\\[+)|(\\]+)/gm, \"\");\n};\n\nvar renameV = function renameV(str) {\n  return strLib[str] ? strLib[str] : toLower(str);\n};\n\nvar prepTitles = function prepTitles() {\n  var pack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return pack.map(function (el) {\n    return renameV(el);\n  });\n};\n\nexport var prepCols = function prepCols() {\n  var pack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return [prepTitles(pack[0].split(/[\\s]/gm).filter(function (el) {\n    return el;\n  })).filter(function (el) {\n    return identical(NaN, +el);\n  }).filter(function (el) {\n    return el !== \"-\";\n  }), pack[1].split(\"\t\")];\n};","map":{"version":3,"sources":["/home/vyc/Documents/packparcerwithcalcs/src/parseExlsPacks/prepTitles.js"],"names":["drop","identical","is","strLib","pk","data","PacketID","DataType","DateTime","TimeStamp","Latitude","Longitude","toLower","str","trim","replace","m","toLocaleLowerCase","renameV","prepTitles","pack","map","el","prepCols","split","filter","NaN"],"mappings":"AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,EAA1B,QAAoC,OAApC;AAEA,IAAMC,MAAM,GAAG;AACbC,EAAAA,EAAE,EAAE,MADS;AAEbC,EAAAA,IAAI,EAAE,MAFO;AAGbC,EAAAA,QAAQ,EAAE,MAHG;AAIbC,EAAAA,QAAQ,EAAE,MAJG;AAKbC,EAAAA,QAAQ,EAAE,SALG;AAMbC,EAAAA,SAAS,EAAE,SANE;AAObC,EAAAA,QAAQ,EAAE,UAPG;AAQbC,EAAAA,SAAS,EAAE,UARE;AASb,cAAY,OATC;AAUb,cAAY;AAVC,CAAf;;AAaA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,MAACC,GAAD,uEAAO,EAAP;AAAA,SACdA,GAAG,CACAC,IADH,GAEGC,OAFH,CAEW,UAFX,EAEuB,UAACC,CAAD,EAAO;AAC1B,sBAAWA,CAAC,CAACC,iBAAF,EAAX;AACD,GAJH,EAKGF,OALH,CAKW,OALX,EAKoB,UAACC,CAAD,EAAO;AACvB,qBAAUA,CAAV;AACD,GAPH,EAQGD,OARH,CAQW,OARX,EAQoB,GARpB,EASGA,OATH,CASW,OATX,EASoB,GATpB,EAUGA,OAVH,CAUW,MAVX,EAUmB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,iBAAF,EAAP;AAAA,GAVnB,EAWGF,OAXH,CAWW,OAXX,EAWoB,EAXpB,EAYGA,OAZH,CAYW,eAZX,EAY4B,EAZ5B,CADc;AAAA,CAAhB;;AAeA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACL,GAAD;AAAA,SAAUV,MAAM,CAACU,GAAD,CAAN,GAAcV,MAAM,CAACU,GAAD,CAApB,GAA4BD,OAAO,CAACC,GAAD,CAA7C;AAAA,CAAhB;;AAEA,IAAMM,UAAU,GAAG,SAAbA,UAAa;AAAA,MAACC,IAAD,uEAAQ,EAAR;AAAA,SAAeA,IAAI,CAACC,GAAL,CAAS,UAACC,EAAD;AAAA,WAAQJ,OAAO,CAACI,EAAD,CAAf;AAAA,GAAT,CAAf;AAAA,CAAnB;;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAACH,IAAD,uEAAQ,EAAR;AAAA,SAAe,CACrCD,UAAU,CAACC,IAAI,CAAC,CAAD,CAAJ,CAAQI,KAAR,CAAc,QAAd,EAAwBC,MAAxB,CAA+B,UAACH,EAAD;AAAA,WAAQA,EAAR;AAAA,GAA/B,CAAD,CAAV,CACGG,MADH,CACU,UAACH,EAAD;AAAA,WAAQrB,SAAS,CAACyB,GAAD,EAAM,CAACJ,EAAP,CAAjB;AAAA,GADV,EAEGG,MAFH,CAEU,UAACH,EAAD;AAAA,WAAQA,EAAE,KAAK,GAAf;AAAA,GAFV,CADqC,EAIrCF,IAAI,CAAC,CAAD,CAAJ,CAAQI,KAAR,CAAc,GAAd,CAJqC,CAAf;AAAA,CAAjB","sourcesContent":["import { drop, identical, is } from \"ramda\";\n\nconst strLib = {\n  pk: \"pack\",\n  data: \"pack\",\n  PacketID: \"pack\",\n  DataType: \"pack\",\n  DateTime: \"pack_dt\",\n  TimeStamp: \"pack_dt\",\n  Latitude: \"pack_lat\",\n  Longitude: \"pack_lon\",\n  \"gps.time\": \"stime\",\n  \"gps.date\": \"sdate\"\n};\n\nconst toLower = (str = \"\") =>\n  str\n    .trim()\n    .replace(/[A-Z]+/gm, (m) => {\n      return `_${m.toLocaleLowerCase()}`;\n    })\n    .replace(/\\d+/gm, (m) => {\n      return `${m}`;\n    })\n    .replace(/\\.+/gm, \"_\")\n    .replace(/\\_+/gm, \"_\")\n    .replace(/^./gm, (m) => m.toLocaleLowerCase())\n    .replace(/^\\_/gm, \"\")\n    .replace(/(\\[+)|(\\]+)/gm, \"\");\n\nconst renameV = (str) => (strLib[str] ? strLib[str] : toLower(str));\n\nconst prepTitles = (pack = []) => pack.map((el) => renameV(el));\n\nexport const prepCols = (pack = []) => [\n  prepTitles(pack[0].split(/[\\s]/gm).filter((el) => el))\n    .filter((el) => identical(NaN, +el))\n    .filter((el) => el !== \"-\"),\n  pack[1].split(\"\t\")\n];\n"]},"metadata":{},"sourceType":"module"}